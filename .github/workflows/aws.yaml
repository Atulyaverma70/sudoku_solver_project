name: Build & Deploy to EC2 via ECR

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: self-hosted

    env:
      # Secrets from GitHub repository settings
      ECR_REPO: ${{ secrets.ECR_REPO }}
      AWS_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

      # Tag and container config
      IMAGE_TAG: ${{ github.sha }}
      CONTAINER_NAME: sudoku-app
      CONTAINER_PORT: "5000"    # Flask internal port
      HOST_PORT: "80"           # External accessible port

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push Docker image
        run: |
          docker build -t app:${IMAGE_TAG} .
          docker tag app:${IMAGE_TAG} "${ECR_REPO}:${IMAGE_TAG}"
          docker push "${ECR_REPO}:${IMAGE_TAG}"

      - name: Stop old container (if running)
        continue-on-error: true
        run: |
          if docker ps -q --filter "name=${CONTAINER_NAME}" | grep -q .; then
            docker stop "${CONTAINER_NAME}"
          fi
          if docker ps -aq --filter "name=${CONTAINER_NAME}" | grep -q .; then
            docker rm "${CONTAINER_NAME}"
          fi

      - name: Pull and run new container
        run: |
          docker pull "${ECR_REPO}:${IMAGE_TAG}"
          docker run -d \
            --name "${CONTAINER_NAME}" \
            -p ${HOST_PORT}:${CONTAINER_PORT} \
            -v /home/ubuntu/uploads:/app/uploads \
            "${ECR_REPO}:${IMAGE_TAG}"

      - name: Verify deployment
        run: |
          echo "Waiting for container to initialize..."
          sleep 15
          curl --fail http://localhost:${HOST_PORT}/healthz || exit 1
          echo "Health check passed!"
